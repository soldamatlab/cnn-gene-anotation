p.mine.greater
)
data$diff <- data$speaking - data$silence
diff.mean <- mean(data$diff)
diff.sd <- sd(data$diff)
mu0 <- 0
t.mine <- (diff.mean - mu0) / (diff.sd / sqrt(length(data$diff)))
p.mine.less <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=TRUE)
p.mine.greater <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=FALSE)
p.mine.twosided <- 2*min(
p.mine.less,
p.mine.greater
)
test.less <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "less")
test.greater <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "greater")
test.twosided <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "two.sided")
dataSimple <- data.frame(
silence = c(281, 341, 296, 311, 350, 228, 238, 300, 235, 198),
speaking = c(284, 335, 317, 280, 343, 207, 230, 314, 213, 225)
)
dataComplex <- data.frame(
silence = c(500, 816, 596, 694, 711, 699, 492, 540, 600, 437),
speaking = c(473, 677, 555, 659, 708, 663, 444, 530, 556, 441)
)
# choose data
#data <- dataSimple
data <- dataComplex
data$diff <- data$speaking - data$silence
diff.mean <- mean(data$diff)
diff.sd <- sd(data$diff)
mu0 <- 0
t.mine <- (diff.mean - mu0) / (diff.sd / sqrt(length(data$diff)))
p.mine.less <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=TRUE)
p.mine.greater <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=FALSE)
p.mine.twosided <- 2*min(
p.mine.less,
p.mine.greater
)
test.less <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "less")
test.greater <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "greater")
test.twosided <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "two.sided")
dataSimple <- data.frame(
silence = c(281, 341, 296, 311, 350, 228, 238, 300, 235, 198),
speaking = c(284, 335, 317, 280, 343, 207, 230, 314, 213, 225)
)
dataComplex <- data.frame(
silence = c(500, 816, 596, 694, 711, 699, 492, 540, 600, 437),
speaking = c(473, 677, 555, 659, 708, 663, 444, 530, 556, 441)
)
# choose data
data <- dataSimple
#data <- dataComplex
data$diff <- data$speaking - data$silence
diff.mean <- mean(data$diff)
diff.sd <- sd(data$diff)
mu0 <- 0
t.mine <- (diff.mean - mu0) / (diff.sd / sqrt(length(data$diff)))
p.mine.less <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=TRUE)
p.mine.greater <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=FALSE)
p.mine.twosided <- 2*min(
p.mine.less,
p.mine.greater
)
test.less <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "less")
test.greater <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "greater")
test.twosided <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "two.sided")
dataSimple <- data.frame(
silence = c(281, 341, 296, 311, 350, 228, 238, 300, 235, 198),
speaking = c(284, 335, 317, 280, 343, 207, 230, 314, 213, 225)
)
dataComplex <- data.frame(
silence = c(500, 816, 596, 694, 711, 699, 492, 540, 600, 437),
speaking = c(473, 677, 555, 659, 708, 663, 444, 530, 556, 441)
)
# choose data
#data <- dataSimple
data <- dataComplex
data$diff <- data$speaking - data$silence
diff.mean <- mean(data$diff)
diff.sd <- sd(data$diff)
mu0 <- 0
t.mine <- (diff.mean - mu0) / (diff.sd / sqrt(length(data$diff)))
p.mine.less <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=TRUE)
p.mine.greater <- pt(q=t.mine, df=length(data$diff)-1, lower.tail=FALSE)
p.mine.twosided <- 2*min(
p.mine.less,
p.mine.greater
)
test.less <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "less")
test.greater <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "greater")
test.twosided <- t.test(data$speaking, data$silence, paired = TRUE, alternative = "two.sided")
library(Biostrings)
BiocManager::install("Biostrings")
library(Biostrings)
library(GO.db)
library(installr)
updateR()
library(Biostrings)
library(Biostrings)
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
library(GO.db)
BiocManager::install("GO.db")
library(GO.db)
## read the protein annotation file
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
## read the protein annotation file
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
lf
cd ./Documents
## read the protein annotation file
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
## read the protein annotation file
annotGO <- read.csv("./CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
getwd()
setwd('BIN/hw05')
getwd()
## read the protein annotation file
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
names(annotGO) <- c("protein","go","ont")
## get the most frequent annotations
# GO:0005634 -- nucleus
# GO:0005829 -- cytosol
# ... they fall to cellular component ontology
tail(sort(table(annotGO$go)),20)
values(annotGo$ont)
values(annotGO$ont)
unqiue(annotGO$ont)
unique(annotGO$ont)
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
length(annotGO$protein[annotGO$go=="GO:0006357"])
#' Get child terms in BP ontology
#'
#' use GO.db package
#'
#' @param go A go term to study
#'
#' @return A list of child terms
#' @export
getBPChildren <- function(go){
BPchild <- as.list(GOBPCHILDREN)
return(BPchild[[which(names(BPchild)==go)]])
}
View(getBPChildren)
## child terms for GO:0006468 -- protein phosphorylation
childrenGO6468 <- getBPChildren("GO:0006468")
length(annotGO$protein[annotGO$go %in% childrenGO6468])
#' Get sequences for given GO term
#'
#' use annotation file to get protein names first, then get their sequences
#'
#' @param go A go term to get
#'
#' @return A list of sequences
#' @export
getSequences <- function(go){
p<-annotGO$protein[annotGO$go==go]
seqDatabase[names(seqDatabase) %in% p,]
}
## read the sequential CAFA data
seqDatabase <- readAAStringSet("CAFA3_training_data/uniprot_sprot_exp.fasta")
# focus on protein phosphorylation
writeXStringSet(getSequences("GO:0006468"),"CAFA3_training_data/phosphorylation.fasta")
# and regulation of transcription by RNA polymerase II
writeXStringSet(getSequences("GO:0006357"),"CAFA3_training_data/regulation.fasta")
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
get_names=function(go_ids, term_df=NULL, godir=NULL){
# check if term is user-defined or get the integrated version
term = eval_term(term_df, godir)
# remove obsolete terms
term = term[term[,5]==0,]
# find names for GOs
out = data.frame(go_ids, term[match(go_ids, term[,4]) ,2:3])
colnames(out) = c("go_id", "go_name", "root_node")
rownames(out) = 1:nrow(out)
out[,1] = as.character(out[,1])
return(out)
}
get_names(tail(sort(table(annotGO$go[annotGO$ont=="P"])),20))
library(GOfuncR)
BiocManager::install("GOfuncR")
get_names(tail(sort(table(annotGO$go[annotGO$ont=="P"])),20))
View(get_names)
library(GOfuncR)
## read the protein annotation file
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
names(annotGO) <- c("protein","go","ont")
## get the most frequent annotations
# GO:0005634 -- nucleus
# GO:0005829 -- cytosol
# ... they fall to cellular component ontology
tail(sort(table(annotGO$go)),20)
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
length(annotGO$protein[annotGO$go=="GO:0006357"])
get_names(tail(sort(table(annotGO$go[annotGO$ont=="P"])),20))
get_names(c('GO:0051082', 'GO:0042254', 'GO:0000109'))
x <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
x <- c(tail(sort(table(annotGO$go[annotGO$ont=="P"])),20))
get_names(c(tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)))
a <- get_names(c('GO:0051082', 'GO:0042254', 'GO:0000109'))
b <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
b
gosearch <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
get_names(colnames(gosearch))
colnames(gosearch)
rownames(gosearch)
get_names(rownames(gosearch))
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
regulation <- readAAStringSet("CAFA3_training_data/regulation.fasta")
get_names(rownames(gosearch))
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),40)
gosearch <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),40)
get_names(rownames(gosearch))
gosearch <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),60)
get_names(rownames(gosearch))
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),60)
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),80)
gosearch <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),80)
get_names(rownames(gosearch))
childrenGO42127 <- getBPChildren("GO:0042127")
#' Get child terms in BP ontology
#'
#' use GO.db package
#'
#' @param go A go term to study
#'
#' @return A list of child terms
#' @export
getBPChildren <- function(go){
BPchild <- as.list(GOBPCHILDREN)
return(BPchild[[which(names(BPchild)==go)]])
}
childrenGO42127 <- getBPChildren("GO:0042127")
length(annotGO$protein[annotGO$go %in% childrenGO42127])
## child terms for GO:0006468 -- protein phosphorylation
childrenGO6468 <- getBPChildren("GO:0006468")
length(annotGO$protein[annotGO$go %in% childrenGO6468])
library(Biostrings)
library(GO.db)
library(GOfuncR)
#' Get child terms in BP ontology
#'
#' use GO.db package
#'
#' @param go A go term to study
#'
#' @return A list of child terms
#' @export
getBPChildren <- function(go){
BPchild <- as.list(GOBPCHILDREN)
return(BPchild[[which(names(BPchild)==go)]])
}
#' Get sequences for given GO term
#'
#' use annotation file to get protein names first, then get their sequences
#'
#' @param go A go term to get
#'
#' @return A list of sequences
#' @export
getSequences <- function(go){
p<-annotGO$protein[annotGO$go==go]
seqDatabase[names(seqDatabase) %in% p,]
}
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
names(annotGO) <- c("protein","go","ont")
sequences42127 <- getSequences("GO:0042127")
## focus on BP only
# GO:0045944 -- 1707, positive regulation of transcription by RNA polymerase II
# GO:0000122 -- 1172, negative regulation of transcription by RNA polymerase II
# we could join to GO:0006357 -- 564, regulation of transcription by RNA polymerase II
# ...
# GO:0007165 -- 866, signal transduction
# GO:0006468 -- 799, protein phosphorylation
tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
gosearch <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),20)
get_names(rownames(gosearch))
gosearch <- tail(sort(table(annotGO$go[annotGO$ont=="P"])),40)
get_names(rownames(gosearch))
GO_id <- "GO:0042127"
sequences42127 <- getSequences(GO_id)
GO_id <- "GO:0006357"
sequences42127 <- getSequences(GO_id)
library(Biostrings)
library(GO.db)
library(GOfuncR)
#' Get child terms in BP ontology
#'
#' use GO.db package
#'
#' @param go A go term to study
#'
#' @return A list of child terms
#' @export
getBPChildren <- function(go){
BPchild <- as.list(GOBPCHILDREN)
return(BPchild[[which(names(BPchild)==go)]])
}
#' Get sequences for given GO term
#'
#' use annotation file to get protein names first, then get their sequences
#'
#' @param go A go term to get
#'
#' @return A list of sequences
#' @export
getSequences <- function(go){
p<-annotGO$protein[annotGO$go==go]
seqDatabase[names(seqDatabase) %in% p,]
}
seqDatabase <- readAAStringSet("CAFA3_training_data/uniprot_sprot_exp.fasta")
GO_id <- "GO:0042127"
sequences42127 <- getSequences(GO_id)
library(Biostrings)
library(GO.db)
library(GOfuncR)
#' Get child terms in BP ontology
#'
#' use GO.db package
#'
#' @param go A go term to study
#'
#' @return A list of child terms
#' @export
getBPChildren <- function(go){
BPchild <- as.list(GOBPCHILDREN)
return(BPchild[[which(names(BPchild)==go)]])
}
#' Get sequences for given GO term
#'
#' use annotation file to get protein names first, then get their sequences
#'
#' @param go A go term to get
#'
#' @return A list of sequences
#' @export
getSequences <- function(go){
p<-annotGO$protein[annotGO$go==go]
seqDatabase[names(seqDatabase) %in% p,]
}
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
names(annotGO) <- c("protein","go","ont")
seqDatabase <- readAAStringSet("CAFA3_training_data/uniprot_sprot_exp.fasta")
GO_id <- "GO:0042127"
sequences42127 <- getSequences(GO_id)
childrenGO42127 <- getBPChildren(GO_id)
sequences42127 <- getSequences("GO:0042127")
sequences42127 <- getSequences("GO:0042981")
library(Biostrings)
library(GO.db)
library(GOfuncR)
#' Get child terms in BP ontology
#'
#' use GO.db package
#'
#' @param go A go term to study
#'
#' @return A list of child terms
#' @export
getBPChildren <- function(go){
BPchild <- as.list(GOBPCHILDREN)
return(BPchild[[which(names(BPchild)==go)]])
}
#' Get sequences for given GO term
#'
#' use annotation file to get protein names first, then get their sequences
#'
#' @param go A go term to get
#'
#' @return A list of sequences
#' @export
getSequences <- function(go){
p<-annotGO$protein[annotGO$go==go]
seqDatabase[names(seqDatabase) %in% p,]
}
getSequencesMultipleTerms <- function(terms){
}
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
names(annotGO) <- c("protein","go","ont")
seqDatabase <- readAAStringSet("CAFA3_training_data/uniprot_sprot_exp.fasta")
sequences0042127 <- getSequences("GO:0042127")
childrenGO0042127 <- getBPChildren("GO:0042127")
sequences0042981 <- getSequences("GO:0042981")
test <- merge(sequences0042127, sequences0042981)
a <- annotGO$protein[annotGO$go=="GO:0042127"]
b <- annotGO$protein[annotGO$go=="GO:0042981"]
test <- merge(a,b)
test <- join(a, b)
test <- a + b
test <- c(a,b)
test <- c()
test <- c(test,a)
getSequencesMultipleTerms <- function(terms){
p <- c()
for (go in terms) {
p <- c(p, annotGO$protein[annotGO$go==go])
}
seqDatabase[names(seqDatabase) %in% p,]
}
#sequences0042127 <- getSequences("GO:0042127")
terms0042127 <- c("0042127", getBPChildren("GO:0042127"))
#sequences0042127 <- getSequences("GO:0042127")
terms0042127 <- c("GO:0042127", getBPChildren("GO:0042127"))
sequences0042127 <- getSequencesMultipleTerms(terms0042127)
library(Biostrings)
library(GO.db)
library(GOfuncR)
#' Get child terms in BP ontology
#'
#' use GO.db package
#'
#' @param go A go term to study
#'
#' @return A list of child terms
#' @export
getBPChildren <- function(go){
BPchild <- as.list(GOBPCHILDREN)
return(BPchild[[which(names(BPchild)==go)]])
}
#' Get sequences for given GO term
#'
#' use annotation file to get protein names first, then get their sequences
#'
#' @param go A go term to get
#'
#' @return A list of sequences
#' @export
getSequences <- function(go){
p<-annotGO$protein[annotGO$go==go]
seqDatabase[names(seqDatabase) %in% p,]
}
getSequencesMultipleTerms <- function(terms){
p <- c()
for (go in terms) {
p <- c(p, annotGO$protein[annotGO$go==go])
}
seqDatabase[names(seqDatabase) %in% p,]
}
annotGO <- read.csv("CAFA3_training_data/uniprot_sprot_exp.txt", sep="\t", header=F)
names(annotGO) <- c("protein","go","ont")
seqDatabase <- readAAStringSet("CAFA3_training_data/uniprot_sprot_exp.fasta")
# GO:0042127 regulation of cell population proliferation
# GO:0042981 regulation of apoptotic process
# GO:0006974 DNA damage response
GO_id = "GO:0042127"
terms <- c(GO_id, getBPChildren(GO_id))
sequences <- getSequencesMultipleTerms(terms)
writeXStringSet(sequences, "CAFA3_training_data/population.fasta")
# GO:0042127 regulation of cell population proliferation
# GO:0042981 regulation of apoptotic process
# GO:0006974 DNA damage response
GO_id = "GO:0042981"
terms <- c(GO_id, getBPChildren(GO_id))
sequences <- getSequencesMultipleTerms(terms)
writeXStringSet(sequences, "CAFA3_training_data/apoptosis.fasta")
# GO:0042127 regulation of cell population proliferation
# GO:0042981 regulation of apoptotic process
# GO:0006974 DNA damage response
GO_id = "GO:0006974"
terms <- c(GO_id, getBPChildren(GO_id))
sequences <- getSequencesMultipleTerms(terms)
writeXStringSet(sequences, "CAFA3_training_data/damage.fasta")
